name: Compile and Release Minecraft Mod

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to compile from'
        required: true
        default: 'main'
      release_type:
        description: 'Is this a beta or release?'
        required: true
        type: choice
        options:
          - beta
          - release
      changelog:
        description: 'Changelog for this release (if release_type is release)'
        required: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Checkout the specified branch
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.inputs.branch }}

    # Set up JDK 17
    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adopt'

    # Cache Gradle dependencies
    - name: Cache Gradle packages
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', '**/gradle.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    # Set execute permissions on gradlew
    - name: Make gradlew executable
      run: chmod +x ./gradlew

    # Run Gradle build with increased verbosity
    - name: Build with Gradle
      run: ./gradlew build --info

    # Extract version and Minecraft version from built artifact
    - name: Extract version and Minecraft version
      id: extract_version
      run: |
        artifact_path=$(find build/libs -name "*.jar" | head -n 1)
        filename=$(basename "$artifact_path")
        regex='mod-disable-(.+)-mc(.+)\.jar'
        if [[ $filename =~ $regex ]]; then
          echo "mod_version=${BASH_REMATCH[1]}" >> $GITHUB_ENV
          echo "mc_version=${BASH_REMATCH[2]}" >> $GITHUB_ENV
        else
          echo "Failed to extract version information from $filename" >&2
          exit 1
        fi

    # Upload build artifact
    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: build-artifact
        path: build/libs/*.jar

    # Create a GitHub release if requested
    - name: Create GitHub Release
      if: ${{ success() }}
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.release_type }}-${{ env.mod_version }}-mc-${{ env.mc_version }}
        release_name: ${{ github.event.inputs.release_type }}-${{ env.mod_version }}-mc-${{ env.mc_version }}
        body: ${{ github.event.inputs.changelog || 'No changelog provided.' }}
        draft: false
        prerelease: ${{ github.event.inputs.release_type == 'beta' }}

    # Upload jar to release
    - name: Upload JAR to Release
      if: ${{ success() }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: build/libs/*.jar
        asset_name: mod-disable-${{ env.mod_version }}-mc-${{ env.mc_version }}.jar
        asset_content_type: application/java-archive
